"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Avatar, AvatarFallback } from "@/components/ui/avatar"
import { Card } from "@/components/ui/card"
import { Send, Plus, MessageSquare, BookOpen, Menu, User, Bot, LogOut, Settings } from "lucide-react"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import Link from "next/link"

interface Message {
  id: string
  content: string
  role: "user" | "assistant"
  timestamp: Date
}

interface Chat {
  id: string
  title: string
  messages: Message[]
}

export default function ChatPage() {
  const [sidebarOpen, setSidebarOpen] = useState(true)
  const [currentChatId, setCurrentChatId] = useState("1")
  const [inputMessage, setInputMessage] = useState("")

  const [chats, setChats] = useState<Chat[]>([
    {
      id: "1",
      title: "‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶∞‡¶£ ‡¶∂‡ßá‡¶ñ‡¶æ",
      messages: [
        {
          id: "1",
          content:
            "‡¶Ü‡¶∏‡¶∏‡¶æ‡¶≤‡¶æ‡¶Æ‡ßÅ ‡¶Ü‡¶≤‡¶æ‡¶á‡¶ï‡ßÅ‡¶Æ! ‡¶Ü‡¶Æ‡¶ø ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶ï, ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶∂‡ßá‡¶ñ‡¶æ‡¶∞ ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶ï‡•§ ‡¶Ü‡¶ú ‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡ßÄ ‡¶∂‡¶ø‡¶ñ‡¶§‡ßá ‡¶ö‡¶æ‡¶®?\n\nüîä ‡¶≠‡¶Ø‡¶º‡ßá‡¶∏: ‡¶Ü‡¶∏‡¶∏‡¶æ‡¶≤‡¶æ‡¶Æ‡ßÅ ‡¶Ü‡¶≤‡¶æ‡¶á‡¶ï‡ßÅ‡¶Æ, ‡¶Ü‡¶Æ‡¶ø ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶ï, ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶ü‡¶ø‡¶â‡¶ü‡¶∞‡•§",
          role: "assistant",
          timestamp: new Date(),
        },
      ],
    },
  ])

  const currentChat = chats.find((chat) => chat.id === currentChatId)

  const handleSendMessage = () => {
    if (!inputMessage.trim()) return

    const newMessage: Message = {
      id: Date.now().toString(),
      content: inputMessage,
      role: "user",
      timestamp: new Date(),
    }

    // Add user message
    setChats((prev) =>
      prev.map((chat) => (chat.id === currentChatId ? { ...chat, messages: [...chat.messages, newMessage] } : chat)),
    )

    // Simulate AI response based on the instructions
    setTimeout(() => {
      const aiResponse: Message = {
        id: (Date.now() + 1).toString(),
        content: getBanglaAIResponse(inputMessage),
        role: "assistant",
        timestamp: new Date(),
      }

      setChats((prev) =>
        prev.map((chat) => (chat.id === currentChatId ? { ...chat, messages: [...chat.messages, aiResponse] } : chat)),
      )
    }, 1000)

    setInputMessage("")
  }

  const getBanglaAIResponse = (userMessage: string): string => {
    // Simulate responses following the Bangla Tutor instructions
    const responses = [
      `**‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ:** ‡¶è‡¶ü‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡•§ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶≠‡¶æ‡¶∑‡¶æ‡¶Ø‡¶º ‡¶è‡¶á ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ‡¶ü‡¶ø ‡¶¨‡ßÅ‡¶ù‡¶§‡ßá ‡¶π‡¶≤‡ßá ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶Æ‡ßÇ‡¶≤ ‡¶ß‡¶æ‡¶∞‡¶£‡¶æ‡¶ü‡¶ø ‡¶ú‡¶æ‡¶®‡¶æ ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞‡•§

**‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:** ‡¶ß‡¶∞‡ßÅ‡¶®, ‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ø‡¶¶‡¶ø "‡¶Ü‡¶Æ‡¶ø ‡¶¨‡¶á ‡¶™‡¶°‡¶º‡¶ø" ‡¶¨‡¶æ‡¶ï‡ßç‡¶Ø‡¶ü‡¶ø ‡¶¶‡ßá‡¶ñ‡ßá‡¶® - ‡¶è‡¶ñ‡¶æ‡¶®‡ßá "‡¶Ü‡¶Æ‡¶ø" ‡¶π‡¶≤‡ßã ‡¶ï‡¶∞‡ßç‡¶§‡¶æ, "‡¶¨‡¶á" ‡¶π‡¶≤‡ßã ‡¶ï‡¶∞‡ßç‡¶Æ ‡¶è‡¶¨‡¶Ç "‡¶™‡¶°‡¶º‡¶ø" ‡¶π‡¶≤‡ßã ‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡•§

**‡¶ö‡¶ø‡¶§‡ßç‡¶∞:**
‡¶ï‡¶∞‡ßç‡¶§‡¶æ ‚Üí ‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ ‚Üí ‡¶ï‡¶∞‡ßç‡¶Æ
 ‡¶Ü‡¶Æ‡¶ø  ‚Üí  ‡¶™‡¶°‡¶º‡¶ø  ‚Üí  ‡¶¨‡¶á

‡¶Ü‡¶∞‡¶ì ‡¶ú‡¶æ‡¶®‡¶§‡ßá ‡¶ö‡¶æ‡¶á‡¶≤‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶¨‡¶≤‡ßã!

üîä ‡¶≠‡¶Ø‡¶º‡ßá‡¶∏: ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶∞‡¶£‡ßá ‡¶ï‡¶∞‡ßç‡¶§‡¶æ, ‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ ‡¶Ü‡¶∞ ‡¶ï‡¶∞‡ßç‡¶Æ‡ßá‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï ‡¶¨‡ßÅ‡¶ù‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§`,

      `**‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ:** ‡¶ö‡¶Æ‡ßé‡¶ï‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®! ‡¶è‡¶á ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡¶ü‡¶ø ‡ßØ‡¶Æ-‡ßß‡ß¶‡¶Æ ‡¶∂‡ßç‡¶∞‡ßá‡¶£‡ßÄ‡¶∞ ‡¶∏‡¶ø‡¶≤‡ßá‡¶¨‡¶æ‡¶∏‡ßá ‡¶ñ‡ßÅ‡¶¨‡¶á ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£‡•§

**‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:** ‡¶Ø‡ßá‡¶Æ‡¶® "‡¶∏‡ßÇ‡¶∞‡ßç‡¶Ø ‡¶™‡ßÇ‡¶∞‡ßç‡¶¨ ‡¶¶‡¶ø‡¶ï‡ßá ‡¶ì‡¶†‡ßá" - ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶∏‡ßÇ‡¶∞‡ßç‡¶Ø‡ßá‡¶∞ ‡¶ì‡¶†‡¶æ‡¶∞ ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ‡¶ü‡¶ø ‡¶™‡ßç‡¶∞‡¶ï‡ßÉ‡¶§‡¶ø‡¶∞ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ß‡ßç‡¶∞‡ßÅ‡¶¨ ‡¶∏‡¶§‡ßç‡¶Ø‡•§

**‡¶¨‡¶ø‡¶∂‡ßá‡¶∑ ‡¶ü‡¶ø‡¶™‡¶∏:**
‚Ä¢ ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ‡¶ø‡¶§ ‡¶Ö‡¶®‡ßÅ‡¶∂‡ßÄ‡¶≤‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®
‚Ä¢ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£ ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶¨‡ßÅ‡¶ù‡ßÅ‡¶®
‚Ä¢ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶¶‡ßç‡¶¨‡¶ø‡¶ß‡¶æ ‡¶ï‡¶∞‡¶¨‡ßá‡¶® ‡¶®‡¶æ

‡¶Ü‡¶∞‡¶ì ‡¶ú‡¶æ‡¶®‡¶§‡ßá ‡¶ö‡¶æ‡¶á‡¶≤‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶¨‡¶≤‡ßã!

üîä ‡¶≠‡¶Ø‡¶º‡ßá‡¶∏: ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ‡¶ø‡¶§ ‡¶Ö‡¶®‡ßÅ‡¶∂‡ßÄ‡¶≤‡¶® ‡¶ï‡¶∞‡¶≤‡ßá ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶∏‡¶π‡¶ú ‡¶π‡¶Ø‡¶º‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá‡•§`,

      `**‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ:** ‡¶è‡¶ü‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶≠‡ßÅ‡¶≤ ‡¶Ø‡¶æ ‡¶Ö‡¶®‡ßá‡¶ï‡ßá‡¶á ‡¶ï‡¶∞‡ßá ‡¶•‡¶æ‡¶ï‡ßá‡¶®‡•§ ‡¶Ü‡¶∏‡ßÅ‡¶® ‡¶∏‡¶†‡¶ø‡¶ï ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ‡¶ü‡¶ø ‡¶ú‡ßá‡¶®‡ßá ‡¶®‡¶ø‡¶á‡•§

**‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:** 
‚úó ‡¶≠‡ßÅ‡¶≤: "‡¶Ü‡¶Æ‡¶ø ‡¶∏‡ßç‡¶ï‡ßÅ‡¶≤‡ßá ‡¶Ø‡¶æ‡¶¨‡ßã"
‚úì ‡¶∏‡¶†‡¶ø‡¶ï: "‡¶Ü‡¶Æ‡¶ø ‡¶∏‡ßç‡¶ï‡ßÅ‡¶≤‡ßá ‡¶Ø‡¶æ‡¶¨"

**‡¶Æ‡¶®‡ßá ‡¶∞‡¶æ‡¶ñ‡¶æ‡¶∞ ‡¶ï‡ßå‡¶∂‡¶≤:**
‡¶≠‡¶¨‡¶ø‡¶∑‡ßç‡¶Ø‡ßé ‡¶ï‡¶æ‡¶≤‡ßá "‡¶¨‡ßã" ‡¶®‡¶Ø‡¶º, "‡¶¨" ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§

‡¶Ü‡¶∞‡¶ì ‡¶ú‡¶æ‡¶®‡¶§‡ßá ‡¶ö‡¶æ‡¶á‡¶≤‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶¨‡¶≤‡ßã!

üîä ‡¶≠‡¶Ø‡¶º‡ßá‡¶∏: ‡¶≠‡¶¨‡¶ø‡¶∑‡ßç‡¶Ø‡ßé ‡¶ï‡¶æ‡¶≤‡ßá ‡¶∏‡¶†‡¶ø‡¶ï ‡¶¨‡¶æ‡¶®‡¶æ‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶ú‡¶∞‡ßÅ‡¶∞‡¶ø‡•§`,
    ]
    return responses[Math.floor(Math.random() * responses.length)]
  }

  const createNewChat = () => {
    const newChat: Chat = {
      id: Date.now().toString(),
      title: "‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡¶•‡ßã‡¶™‡¶ï‡¶•‡¶®",
      messages: [
        {
          id: Date.now().toString(),
          content:
            "‡¶Ü‡¶∏‡¶∏‡¶æ‡¶≤‡¶æ‡¶Æ‡ßÅ ‡¶Ü‡¶≤‡¶æ‡¶á‡¶ï‡ßÅ‡¶Æ! ‡¶Ü‡¶Æ‡¶ø ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶ï, ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶∂‡ßá‡¶ñ‡¶æ‡¶∞ ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶ï‡•§ ‡¶Ü‡¶ú ‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡ßÄ ‡¶∂‡¶ø‡¶ñ‡¶§‡ßá ‡¶ö‡¶æ‡¶®?\n\nüîä ‡¶≠‡¶Ø‡¶º‡ßá‡¶∏: ‡¶Ü‡¶∏‡¶∏‡¶æ‡¶≤‡¶æ‡¶Æ‡ßÅ ‡¶Ü‡¶≤‡¶æ‡¶á‡¶ï‡ßÅ‡¶Æ, ‡¶Ü‡¶Æ‡¶ø ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶ï, ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶ü‡¶ø‡¶â‡¶ü‡¶∞‡•§",
          role: "assistant",
          timestamp: new Date(),
        },
      ],
    }
    setChats((prev) => [newChat, ...prev])
    setCurrentChatId(newChat.id)
  }

  return (
    <div className="flex h-screen bg-gray-50">
      {/* Sidebar */}
      <div
        className={`${sidebarOpen ? "w-64" : "w-0"} transition-all duration-300 bg-gray-900 text-white overflow-hidden`}
      >
        <div className="p-4">
          <div className="flex items-center gap-2 mb-6">
            <BookOpen className="h-8 w-8 text-green-400" />
            <h1 className="text-xl font-bold">‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶ï AI</h1>
          </div>

          <Button
            onClick={createNewChat}
            className="w-full mb-4 bg-gray-800 hover:bg-gray-700 text-white border border-gray-600"
          >
            <Plus className="h-4 w-4 mr-2" />
            ‡¶®‡¶§‡ßÅ‡¶® ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü
          </Button>

          <ScrollArea className="h-[calc(100vh-200px)]">
            <div className="space-y-2">
              {chats.map((chat) => (
                <Button
                  key={chat.id}
                  variant={currentChatId === chat.id ? "secondary" : "ghost"}
                  className={`w-full justify-start text-left p-3 h-auto ${
                    currentChatId === chat.id
                      ? "bg-gray-700 text-white"
                      : "text-gray-300 hover:bg-gray-800 hover:text-white"
                  }`}
                  onClick={() => setCurrentChatId(chat.id)}
                >
                  <MessageSquare className="h-4 w-4 mr-2 flex-shrink-0" />
                  <span className="truncate">{chat.title}</span>
                </Button>
              ))}
            </div>
          </ScrollArea>
        </div>
      </div>

      {/* Main Chat Area */}
      <div className="flex-1 flex flex-col">
        {/* Header */}
        <div className="bg-white border-b border-gray-200 p-4 flex items-center justify-between">
          <div className="flex items-center gap-3">
            <Button variant="ghost" size="sm" onClick={() => setSidebarOpen(!sidebarOpen)}>
              <Menu className="h-5 w-5" />
            </Button>
            <div className="flex items-center gap-2">
              <Avatar className="h-8 w-8 bg-green-100">
                <AvatarFallback className="text-green-700 font-bold">‡¶∂‡¶ø</AvatarFallback>
              </Avatar>
              <div>
                <h2 className="font-semibold text-gray-900">‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶ï AI</h2>
                <p className="text-sm text-gray-500">‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶≠‡¶æ‡¶∑‡¶æ‡¶∞ ‡¶ü‡¶ø‡¶â‡¶ü‡¶∞</p>
              </div>
            </div>
          </div>

          {/* User Menu */}
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" size="sm">
                <Avatar className="h-8 w-8 bg-blue-100">
                  <AvatarFallback className="text-blue-700">
                    <User className="h-4 w-4" />
                  </AvatarFallback>
                </Avatar>
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end" className="w-56">
              <DropdownMenuItem>
                <Settings className="mr-2 h-4 w-4" />
                <span>‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏</span>
              </DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuItem asChild>
                <Link href="/">
                  <LogOut className="mr-2 h-4 w-4" />
                  <span>‡¶≤‡¶ó‡¶Ü‡¶â‡¶ü</span>
                </Link>
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>

        {/* Messages */}
        <ScrollArea className="flex-1 p-4">
          <div className="max-w-3xl mx-auto space-y-6">
            {currentChat?.messages.map((message) => (
              <div
                key={message.id}
                className={`flex gap-3 ${message.role === "user" ? "justify-end" : "justify-start"}`}
              >
                {message.role === "assistant" && (
                  <Avatar className="h-8 w-8 bg-green-100 flex-shrink-0">
                    <AvatarFallback className="text-green-700">
                      <Bot className="h-4 w-4" />
                    </AvatarFallback>
                  </Avatar>
                )}

                <Card
                  className={`max-w-[80%] p-4 ${
                    message.role === "user" ? "bg-blue-600 text-white ml-auto" : "bg-white border border-gray-200"
                  }`}
                >
                  <div className="text-sm leading-relaxed whitespace-pre-wrap">{message.content}</div>
                </Card>

                {message.role === "user" && (
                  <Avatar className="h-8 w-8 bg-blue-100 flex-shrink-0">
                    <AvatarFallback className="text-blue-700">
                      <User className="h-4 w-4" />
                    </AvatarFallback>
                  </Avatar>
                )}
              </div>
            ))}
          </div>
        </ScrollArea>

        {/* Input Area */}
        <div className="bg-white border-t border-gray-200 p-4">
          <div className="max-w-3xl mx-auto">
            <div className="flex gap-3">
              <Input
                value={inputMessage}
                onChange={(e) => setInputMessage(e.target.value)}
                placeholder="‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®..."
                className="flex-1 border-gray-300 focus:border-green-500 focus:ring-green-500"
                onKeyPress={(e) => e.key === "Enter" && handleSendMessage()}
              />
              <Button
                onClick={handleSendMessage}
                className="bg-green-600 hover:bg-green-700 text-white"
                disabled={!inputMessage.trim()}
              >
                <Send className="h-4 w-4" />
              </Button>
            </div>
            <p className="text-xs text-gray-500 mt-2 text-center">
              ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶ï AI ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶∂‡ßá‡¶ñ‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶°‡¶ø‡¶ú‡¶æ‡¶á‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶≠‡ßÅ‡¶≤ ‡¶§‡¶•‡ßç‡¶Ø ‡¶•‡¶æ‡¶ï‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§
            </p>
          </div>
        </div>
      </div>
    </div>
  )
}
