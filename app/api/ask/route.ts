import { type NextRequest, NextResponse } from "next/server"

export async function POST(req: NextRequest) {
  console.log("=== API Route Debug Info ===")
  console.log("OPENAI_API_KEY exists:", !!process.env.OPENAI_API_KEY)
  console.log("ASSISTANT_ID exists:", !!process.env.ASSISTANT_ID)
  console.log("Environment:", process.env.NODE_ENV)

  try {
    const { userMessage, imageUrl } = await req.json()
    console.log("Request received:", {
      hasMessage: !!userMessage,
      hasImage: !!imageUrl,
      messageLength: userMessage?.length,
    })

    if (!userMessage) {
      return NextResponse.json({ error: "Message is required" }, { status: 400 })
    }

    // Check if we have OpenAI credentials
    if (!process.env.OPENAI_API_KEY || !process.env.ASSISTANT_ID) {
      console.log("Missing OpenAI credentials, using fallback")
      return NextResponse.json({ reply: getBanglaAIResponse(userMessage, !!imageUrl) })
    }

    // Try OpenAI API
    try {
      const response = await fetch("https://api.openai.com/v1/chat/completions", {
        method: "POST",
        headers: {
          Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          model: "gpt-4",
          messages: [
            {
              role: "system",
              content:
                "You are a Bengali language tutor. Respond in Bengali and English mix. Help students learn Bengali grammar, vocabulary, and literature. Use examples and be encouraging.",
            },
            {
              role: "user",
              content: userMessage,
            },
          ],
          max_tokens: 500,
          temperature: 0.7,
        }),
      })

      if (!response.ok) {
        throw new Error(`OpenAI API error: ${response.status}`)
      }

      const data = await response.json()
      const aiReply = data.choices[0]?.message?.content

      if (aiReply) {
        console.log("OpenAI response received successfully")
        return NextResponse.json({ reply: aiReply })
      } else {
        throw new Error("No response from OpenAI")
      }
    } catch (openaiError) {
      console.error("OpenAI API failed:", openaiError)
      console.log("Falling back to local response")
      return NextResponse.json({ reply: getBanglaAIResponse(userMessage, !!imageUrl) })
    }
  } catch (error: any) {
    console.error("API Error:", error)
    return NextResponse.json({
      reply: getBanglaAIResponse("рж╕рж╛рж╣рж╛ржпрзНржп ржЪрж╛ржЗ"),
      debug: {
        error: error.message,
        type: error.constructor.name,
        hasApiKey: !!process.env.OPENAI_API_KEY,
        hasAssistantId: !!process.env.ASSISTANT_ID,
      },
    })
  }
}

function getBanglaAIResponse(userMessage: string, hasImage = false): string {
  if (hasImage) {
    return "**ржЫржмрж┐ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг:** ржЖржкржирж╛рж░ ржкрж╛ржарж╛ржирзЛ ржЫржмрж┐ржЯрж┐ ржжрзЗржЦрзЗ ржоржирзЗ рж╣ржЪрзНржЫрзЗ ржПржЯрж┐ ржмрж╛ржВрж▓рж╛ ржнрж╛рж╖рж╛рж░ ржПржХржЯрж┐ ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг ржмрж┐рж╖ржпрж╝ред\n\n**ржмрзНржпрж╛ржЦрзНржпрж╛:** ржЫржмрж┐рждрзЗ ржпрж╛ ржжрзЗржЦрж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗ рждрж╛ ржмрзБржЭрждрзЗ рж╣рж▓рзЗ ржкрзНрж░рж╕ржЩрзНржЧ ржЬрж╛ржирж╛ ржжрж░ржХрж╛рж░ред\n\n**ржкрж░рж╛ржорж░рзНрж╢:**\nтАв ржЫржмрж┐рж░ рж╕рж╛ржерзЗ ржПржХржЯрж┐ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржкрзНрж░рж╢рзНржи ржХрж░рзБржи\nтАв ржХрзЛржи ржмрж┐рж╖ржпрж╝рзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржЪрж╛ржи рждрж╛ ржмрж▓рзБржи\nтАв ржЖрж░рзЛ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд рждржерзНржп ржжрж┐ржи\n\nржЖрж░рзЛ ржЬрж╛ржирждрзЗ ржЪрж╛ржЗрж▓рзЗ ржмрж▓рзБржи!\n\nЁЯФК ржнржпрж╝рзЗрж╕: ржЫржмрж┐ рж╕рж╣ ржкрзНрж░рж╢рзНржи ржХрж░рж▓рзЗ ржЖрж░рзЛ ржнрж╛рж▓рзЛ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░ржмред"
  }

  const responses = [
    '**ржмрзНржпрж╛ржЦрзНржпрж╛:** ржПржЯрж┐ ржПржХржЯрж┐ ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг ржмрж┐рж╖ржпрж╝ред ржмрж╛ржВрж▓рж╛ржпрж╝ ржПржЗ ржирж┐ржпрж╝ржоржЯрж┐ ржмрзБржЭрждрзЗ рж╣рж▓рзЗ ржкрзНрж░ржержорзЗ ржорзВрж▓ ржзрж╛рж░ржгрж╛ржЯрж┐ ржЬрж╛ржирждрзЗ рж╣ржмрзЗред\n\n**ржЙржжрж╛рж╣рж░ржг:** ржпрзЗржоржи "ржЖржорж┐ ржмржЗ ржкржбрж╝рж┐" (Ami boi pori) ржмрж╛ржХрзНржпрзЗ "ржЖржорж┐" (Ami) ржХрж░рзНрждрж╛, "ржмржЗ" (boi) ржХрж░рзНржо ржПржмржВ "ржкржбрж╝рж┐" (pori) ржХрзНрж░рж┐ржпрж╝рж╛ред\n\n**ржЧрж╛ржгрж┐рждрж┐ржХ рж╕рзВрждрзНрж░:** $$a^2 + b^2 = c^2$$\n\n**ржЪрж┐рждрзНрж░:**\nржХрж░рзНрждрж╛ тЖТ ржХрзНрж░рж┐ржпрж╝рж╛ тЖТ ржХрж░рзНржо\nржЖржорж┐ тЖТ ржкржбрж╝рж┐ тЖТ ржмржЗ\n\nржЖрж░рзЛ ржЬрж╛ржирждрзЗ ржЪрж╛ржЗрж▓рзЗ ржмрж▓рзБржи!\n\nЁЯФК ржнржпрж╝рзЗрж╕: ржмрж╛ржВрж▓рж╛ ржмрзНржпрж╛ржХрж░ржгрзЗ ржХрж░рзНрждрж╛, ржХрзНрж░рж┐ржпрж╝рж╛ ржУ ржХрж░рзНржорзЗрж░ рж╕ржорзНржкрж░рзНржХ ржмрзБржЭрждрзЗ рж╣ржмрзЗред',

    '**ржмрзНржпрж╛ржЦрзНржпрж╛:** ржЪржорзОржХрж╛рж░ ржкрзНрж░рж╢рзНржи! ржПржЗ ржмрж┐рж╖ржпрж╝ржЯрж┐ ржиржмржо-ржжрж╢ржо рж╢рзНрж░рзЗржгрж┐рж░ ржкрж╛ржарзНржпржХрзНрж░ржорзЗ ржЦрзБржмржЗ ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржгред\n\n**ржЙржжрж╛рж╣рж░ржг:** ржпрзЗржоржи "рж╕рзВрж░рзНржп ржкрзВрж░рзНржм ржжрж┐ржХрзЗ ржУржарзЗ" (Surjo purbo dike othe) - ржПржЦрж╛ржирзЗ рж╕рзВрж░рзНржп ржУржарж╛рж░ ржирж┐ржпрж╝ржоржЯрж┐ ржкрзНрж░ржХрзГрждрж┐рж░ ржЪрж┐рж░ржирзНрждржи рж╕рждрзНржпред\n\n**ржЧржгрж┐ржд:** ржмрзГрждрзНрждрзЗрж░ ржХрзНрж╖рзЗрждрзНрж░ржлрж▓ = $\\pi r^2$\n\n**ржмрж┐рж╢рзЗрж╖ ржЯрж┐ржкрж╕:**\nтАв ржирж┐ржпрж╝ржорж┐ржд ржЕржирзБрж╢рзАрж▓ржи ржХрж░рзБржи\nтАв ржЙржжрж╛рж╣рж░ржг ржжрж┐ржпрж╝рзЗ ржмрзБржЭрзБржи\nтАв ржкрзНрж░рж╢рзНржи ржХрж░рждрзЗ ржжрзНржмрж┐ржзрж╛ ржХрж░ржмрзЗржи ржирж╛\n\nржЖрж░рзЛ ржЬрж╛ржирждрзЗ ржЪрж╛ржЗрж▓рзЗ ржмрж▓рзБржи!\n\nЁЯФК ржнржпрж╝рзЗрж╕: ржирж┐ржпрж╝ржорж┐ржд ржЕржирзБрж╢рзАрж▓ржирзЗ ржмрж╛ржВрж▓рж╛ рж╕рж╣ржЬ рж╣ржпрж╝рзЗ ржпрж╛ржмрзЗред',

    '**ржмрзНржпрж╛ржЦрзНржпрж╛:** ржПржЯрж┐ ржПржХржЯрж┐ рж╕рж╛ржзрж╛рж░ржг ржнрзБрж▓ ржпрж╛ ржЕржирзЗржХрзЗржЗ ржХрж░рзЗ ржерж╛ржХрзЗржиред ржЪрж▓рзБржи рж╕ржарж┐ржХ ржирж┐ржпрж╝ржоржЯрж┐ рж╢рж┐ржЦрж┐ред\n\n**ржЙржжрж╛рж╣рж░ржг:**\nтЬЧ ржнрзБрж▓: "ржЖржорж┐ рж╕рзНржХрзБрж▓рзЗ ржпрж╛ржмрзЛ" (Ami school-e jabo)\nтЬУ рж╕ржарж┐ржХ: "ржЖржорж┐ рж╕рзНржХрзБрж▓рзЗ ржпрж╛ржм" (Ami school-e jab)\n\n**рж╕ржорзАржХрж░ржг:** $x + y = z$ ржпрзЗржЦрж╛ржирзЗ $x$ рж╣рж▓ ржХрж░рзНрждрж╛, $y$ рж╣рж▓ ржХрзНрж░рж┐ржпрж╝рж╛ ржПржмржВ $z$ рж╣рж▓ рж╕ржорзНржкрзВрж░рзНржг ржмрж╛ржХрзНржпред\n\n**ржоржирзЗ рж░рж╛ржЦрж╛рж░ ржХрзМрж╢рж▓:**\nржнржмрж┐рж╖рзНржпрзО ржХрж╛рж▓рзЗ "ржмрзЛ" ржПрж░ ржкрж░рж┐ржмрж░рзНрждрзЗ "ржм" ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред\n\nржЖрж░рзЛ ржЬрж╛ржирждрзЗ ржЪрж╛ржЗрж▓рзЗ ржмрж▓рзБржи!\n\nЁЯФК ржнржпрж╝рзЗрж╕: ржнржмрж┐рж╖рзНржпрзО ржХрж╛рж▓рзЗ рж╕ржарж┐ржХ ржмрж╛ржирж╛ржи ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ ржЬрж░рзБрж░рж┐ред',
  ]
  return responses[Math.floor(Math.random() * responses.length)]
}
