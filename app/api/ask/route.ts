import { type NextRequest, NextResponse } from "next/server"
import OpenAI from "openai"

export async function POST(req: NextRequest) {
  console.log("=== API Route Debug Info ===")
  console.log("OPENAI_API_KEY exists:", !!process.env.OPENAI_API_KEY)
  console.log("ASSISTANT_ID exists:", !!process.env.ASSISTANT_ID)
  console.log("Environment:", process.env.NODE_ENV)

  try {
    const { userMessage, imageUrl } = await req.json()
    console.log("Request received:", {
      hasMessage: !!userMessage,
      hasImage: !!imageUrl,
      messageLength: userMessage?.length,
    })

    if (!userMessage) {
      return NextResponse.json({ error: "Message is required" }, { status: 400 })
    }

    // Check if OpenAI is properly configured
    if (!process.env.OPENAI_API_KEY) {
      console.log("‚ùå OpenAI API key not found, using fallback")
      return NextResponse.json({ reply: getBanglaAIResponse(userMessage) })
    }

    if (!process.env.ASSISTANT_ID) {
      console.log("‚ùå Assistant ID not found, using fallback")
      return NextResponse.json({ reply: getBanglaAIResponse(userMessage) })
    }

    console.log("‚úÖ All checks passed, attempting OpenAI API call...")

    // Initialize OpenAI client
    const openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY,
      timeout: 30000, // 30 second timeout
    })

    console.log("Attempting to create thread...")

    // Create a new thread for this conversation
    const thread = await openai.beta.threads.create()
    console.log("Thread created:", thread.id)

    // Prepare message content
    const messageContent: any = {
      role: "user" as const,
      content: userMessage,
    }

    // If image is provided, add it to the message
    if (imageUrl) {
      messageContent.content = [
        {
          type: "text",
          text: userMessage,
        },
        {
          type: "image_url",
          image_url: {
            url: imageUrl,
          },
        },
      ]
    }

    // Add the user's message to the thread
    await openai.beta.threads.messages.create(thread.id, messageContent)
    console.log("Message added to thread")

    // Run the assistant
    const run = await openai.beta.threads.runs.create(thread.id, {
      assistant_id: process.env.ASSISTANT_ID!,
    })
    console.log("Run created:", run.id)

    // Wait for the run to complete
    let status = "queued"
    let attempts = 0
    const maxAttempts = 15 // 30 seconds timeout (2 seconds * 15)

    while (status !== "completed" && attempts < maxAttempts) {
      const runStatus = await openai.beta.threads.runs.retrieve(thread.id, run.id)
      status = runStatus.status
      console.log(`Run status: ${status}, attempt: ${attempts + 1}`)

      if (status === "failed") {
        console.error("Assistant run failed")
        return NextResponse.json({ reply: getBanglaAIResponse(userMessage) })
      }

      if (status === "requires_action") {
        console.log("Run requires action - not implemented")
        break
      }

      if (status !== "completed") {
        await new Promise((r) => setTimeout(r, 2000))
        attempts++
      }
    }

    if (attempts >= maxAttempts) {
      console.log("Request timeout, using fallback")
      return NextResponse.json({ reply: getBanglaAIResponse(userMessage) })
    }

    // Get the assistant's response
    const messages = await openai.beta.threads.messages.list(thread.id)
    const assistantMessage = messages.data.find((msg) => msg.role === "assistant")

    if (!assistantMessage || !assistantMessage.content[0]) {
      console.log("No response from assistant, using fallback")
      return NextResponse.json({ reply: getBanglaAIResponse(userMessage) })
    }

    const reply =
      assistantMessage.content[0].type === "text"
        ? assistantMessage.content[0].text.value
        : "Sorry, I could not process your request."

    console.log("Successfully got AI response")
    return NextResponse.json({ reply })
  } catch (error: any) {
    console.error("OpenAI API Error:", error)

    // Return detailed error information for debugging
    return NextResponse.json({
      reply: getBanglaAIResponse("‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ö‡¶æ‡¶á"),
      debug: {
        error: error.message,
        type: error.constructor.name,
        hasApiKey: !!process.env.OPENAI_API_KEY,
        hasAssistantId: !!process.env.ASSISTANT_ID,
      },
    })
  }
}

// Enhanced fallback function
function getBanglaAIResponse(userMessage: string): string {
  const responses = [
    `**‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ:** ‡¶è‡¶ü‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡•§ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶Ø‡¶º ‡¶è‡¶á ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ‡¶ü‡¶ø ‡¶¨‡ßÅ‡¶ù‡¶§‡ßá ‡¶π‡¶≤‡ßá ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶Æ‡ßÇ‡¶≤ ‡¶ß‡¶æ‡¶∞‡¶£‡¶æ‡¶ü‡¶ø ‡¶ú‡¶æ‡¶®‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§

**‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:** ‡¶Ø‡ßá‡¶Æ‡¶® "‡¶Ü‡¶Æ‡¶ø ‡¶¨‡¶á ‡¶™‡¶°‡¶º‡¶ø" (Ami boi pori) ‡¶¨‡¶æ‡¶ï‡ßç‡¶Ø‡ßá "‡¶Ü‡¶Æ‡¶ø" (Ami) ‡¶ï‡¶∞‡ßç‡¶§‡¶æ, "‡¶¨‡¶á" (boi) ‡¶ï‡¶∞‡ßç‡¶Æ ‡¶è‡¶¨‡¶Ç "‡¶™‡¶°‡¶º‡¶ø" (pori) ‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡•§

**‡¶ó‡¶æ‡¶£‡¶ø‡¶§‡¶ø‡¶ï ‡¶∏‡ßÇ‡¶§‡ßç‡¶∞:** $$a^2 + b^2 = c^2$$

**‡¶ö‡¶ø‡¶§‡ßç‡¶∞:**
‡¶ï‡¶∞‡ßç‡¶§‡¶æ ‚Üí ‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ ‚Üí ‡¶ï‡¶∞‡ßç‡¶Æ
‡¶Ü‡¶Æ‡¶ø ‚Üí ‡¶™‡¶°‡¶º‡¶ø ‚Üí ‡¶¨‡¶á

‡¶Ü‡¶∞‡ßã ‡¶ú‡¶æ‡¶®‡¶§‡ßá ‡¶ö‡¶æ‡¶á‡¶≤‡ßá ‡¶¨‡¶≤‡ßÅ‡¶®!

üîä ‡¶≠‡¶Ø‡¶º‡ßá‡¶∏: ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶∞‡¶£‡ßá ‡¶ï‡¶∞‡ßç‡¶§‡¶æ, ‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ ‡¶ì ‡¶ï‡¶∞‡ßç‡¶Æ‡ßá‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï ‡¶¨‡ßÅ‡¶ù‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§`,

    `**‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ:** ‡¶ö‡¶Æ‡ßé‡¶ï‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®! ‡¶è‡¶á ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡¶ü‡¶ø ‡¶®‡¶¨‡¶Æ-‡¶¶‡¶∂‡¶Æ ‡¶∂‡ßç‡¶∞‡ßá‡¶£‡¶ø‡¶∞ ‡¶™‡¶æ‡¶†‡ßç‡¶Ø‡¶ï‡ßç‡¶∞‡¶Æ‡ßá ‡¶ñ‡ßÅ‡¶¨‡¶á ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£‡•§

**‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:** ‡¶Ø‡ßá‡¶Æ‡¶® "‡¶∏‡ßÇ‡¶∞‡ßç‡¶Ø ‡¶™‡ßÇ‡¶∞‡ßç‡¶¨ ‡¶¶‡¶ø‡¶ï‡ßá ‡¶ì‡¶†‡ßá" (Surjo purbo dike othe) - ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶∏‡ßÇ‡¶∞‡ßç‡¶Ø ‡¶ì‡¶†‡¶æ‡¶∞ ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ‡¶ü‡¶ø ‡¶™‡ßç‡¶∞‡¶ï‡ßÉ‡¶§‡¶ø‡¶∞ ‡¶ö‡¶ø‡¶∞‡¶®‡ßç‡¶§‡¶® ‡¶∏‡¶§‡ßç‡¶Ø‡•§

**‡¶ó‡¶£‡¶ø‡¶§:** ‡¶¨‡ßÉ‡¶§‡ßç‡¶§‡ßá‡¶∞ ‡¶ï‡ßç‡¶∑‡ßá‡¶§‡ßç‡¶∞‡¶´‡¶≤ = $\\pi r^2$

**‡¶¨‡¶ø‡¶∂‡ßá‡¶∑ ‡¶ü‡¶ø‡¶™‡¶∏:**
‚Ä¢ ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ‡¶ø‡¶§ ‡¶Ö‡¶®‡ßÅ‡¶∂‡ßÄ‡¶≤‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®
‚Ä¢ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£ ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶¨‡ßÅ‡¶ù‡ßÅ‡¶®  
‚Ä¢ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶¶‡ßç‡¶¨‡¶ø‡¶ß‡¶æ ‡¶ï‡¶∞‡¶¨‡ßá‡¶® ‡¶®‡¶æ

‡¶Ü‡¶∞‡ßã ‡¶ú‡¶æ‡¶®‡¶§‡ßá ‡¶ö‡¶æ‡¶á‡¶≤‡ßá ‡¶¨‡¶≤‡ßÅ‡¶®!

üîä ‡¶≠‡¶Ø‡¶º‡ßá‡¶∏: ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ‡¶ø‡¶§ ‡¶Ö‡¶®‡ßÅ‡¶∂‡ßÄ‡¶≤‡¶®‡ßá ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶∏‡¶π‡¶ú ‡¶π‡¶Ø‡¶º‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá‡•§`,

    `**‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ:** ‡¶è‡¶ü‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶≠‡ßÅ‡¶≤ ‡¶Ø‡¶æ ‡¶Ö‡¶®‡ßá‡¶ï‡ßá‡¶á ‡¶ï‡¶∞‡ßá ‡¶•‡¶æ‡¶ï‡ßá‡¶®‡•§ ‡¶ö‡¶≤‡ßÅ‡¶® ‡¶∏‡¶†‡¶ø‡¶ï ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ‡¶ü‡¶ø ‡¶∂‡¶ø‡¶ñ‡¶ø‡•§

**‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:** 
‚úó ‡¶≠‡ßÅ‡¶≤: "‡¶Ü‡¶Æ‡¶ø ‡¶∏‡ßç‡¶ï‡ßÅ‡¶≤‡ßá ‡¶Ø‡¶æ‡¶¨‡ßã" (Ami school-e jabo)
‚úì ‡¶∏‡¶†‡¶ø‡¶ï: "‡¶Ü‡¶Æ‡¶ø ‡¶∏‡ßç‡¶ï‡ßÅ‡¶≤‡ßá ‡¶Ø‡¶æ‡¶¨" (Ami school-e jab)

**‡¶∏‡¶Æ‡ßÄ‡¶ï‡¶∞‡¶£:** $x + y = z$ ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá $x$ ‡¶π‡¶≤ ‡¶ï‡¶∞‡ßç‡¶§‡¶æ, $y$ ‡¶π‡¶≤ ‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ ‡¶è‡¶¨‡¶Ç $z$ ‡¶π‡¶≤ ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶¨‡¶æ‡¶ï‡ßç‡¶Ø‡•§

**‡¶Æ‡¶®‡ßá ‡¶∞‡¶æ‡¶ñ‡¶æ‡¶∞ ‡¶ï‡ßå‡¶∂‡¶≤:**
‡¶≠‡¶¨‡¶ø‡¶∑‡ßç‡¶Ø‡ßé ‡¶ï‡¶æ‡¶≤‡ßá "‡¶¨‡ßã" ‡¶è‡¶∞ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡ßá "‡¶¨" ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§

‡¶Ü‡¶∞‡ßã ‡¶ú‡¶æ‡¶®‡¶§‡ßá ‡¶ö‡¶æ‡¶á‡¶≤‡ßá ‡¶¨‡¶≤‡ßÅ‡¶®!

üîä ‡¶≠‡¶Ø‡¶º‡ßá‡¶∏: ‡¶≠‡¶¨‡¶ø‡¶∑‡ßç‡¶Ø‡ßé ‡¶ï‡¶æ‡¶≤‡ßá ‡¶∏‡¶†‡¶ø‡¶ï ‡¶¨‡¶æ‡¶®‡¶æ‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶ú‡¶∞‡ßÅ‡¶∞‡¶ø‡•§`,
  ]

  return responses[Math.floor(Math.random() * responses.length)]
}
